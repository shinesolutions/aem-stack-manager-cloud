---

- name: Deploy AEM Stack Manager Cloud Native Implementation
  hosts: all
  gather_facts: no
  connection: local
  force_handlers: True
  vars:
    stack_manager_cwd: "{{ playbook_dir }}/../.."
    stack_manager_tmp: "{{ playbook_dir }}/../../stack_manager_tmp"

  tasks:
    - name: Create A Temp Working Directory
      file:
        path: "{{ stack_manager_tmp }}"
        state: directory
        mode: 0755
      notify: Clean Up Temp Folder
      tags:
        - create

    - name: Generate CloudFormation Template for SSM Documents
      shell: >
          ./scripts/generate.sh >  "{{ stack_manager_tmp }}/ssm_template.json"
      args:
        chdir: "{{ stack_manager_cwd }}"
      tags:
        - create

    - name: Create SSM Document Stack
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ stack_manager.ssm_stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: false
        template: "{{ stack_manager_tmp }}/ssm_template.json"
      tags:
        - create

    - name: Zip AEM Stack Manager Lambda Implementation
      command: >
        zip -j "{{ stack_manager_tmp }}/aem_stack_manager.zip" "{{ stack_manager_cwd }}/lambda/aem_stack_manager.py"
      tags:
        - create

    - name: Zip AEM Offline Snapshot Lambda Implementation
      shell: >
        zip -j "{{ stack_manager_tmp }}/aem_offline_snapshot.zip" "{{ stack_manager_cwd }}/lambda/aem_offline_snapshot.py"
      tags:
        - create

    - name: Zip AEM Task Status Query Lambda Implementation
      shell: >
        zip -j "{{ stack_manager_tmp }}/aem_task_query.zip" "{{ stack_manager_cwd }}/lambda/aem_task_query.py"
      tags:
        - create

    - name: Upload Lambada Function Zip Archives to S3
      command: >
              aws s3 sync "{{ stack_manager_tmp }}"
                  s3://{{ stack_manager.s3_bucket }}/{{stack_prefix }}/{{ stack_manager.s3_prefix }}
                  --include "*.zip"
      tags:
        - create

    - name: >
        Create AEM Stack Manager Resources
      cloudformation:
        stack_name: "{{ stack_prefix }}-{{ stack_manager.stack_name }}"
        region: "{{ aws.region }}"
        state: present
        disable_rollback: false
        template: "{{ stack_manager_cwd }}/cloudformation/aem-stack-manager-cloud.yaml"
        template_parameters:
          S3Bucket: "{{ stack_manager.s3_bucket }}"
          S3Prefix: "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}"
          Version: "{{ stack_manager.version}}"
          StackPrefix: "{{ stack_prefix }}"
      register: stack_info
      tags:
        - create

    - name: Create Stack Manager Task and SSM Document Name Mapping File
      command: >
        python "{{ stack_manager_cwd }}"/scripts/create_config.py
               "{{ stack_prefix }}"
               "{{ stack_manager.stack_name }}"
               "{{ stack_manager.s3_bucket }}" 
               "{{ stack_prefix }}/{{ stack_manager.s3_prefix }}" 
               "{{ stack_info.stack_outputs.TaskStatusTopicArn }}" 
               "{{ stack_info.stack_outputs.SSMServiceRoleArn }}" 
               "{{ stack_manager.s3_bucket }}" 
               "{{ stack_info.stack_outputs.BackupTopicArn }}" 
               "{{ stack_info.stack_outputs.AemStackManagerTableName }}"
      tags:
        - create

      tags:
       - create
"{{ stack_prefix }} {{ stack_manager.stack_name }} {{ stack_manager.s3_bucket }} {{ stack_prefix }}/{{ stack_manager.s3_prefix }} {{ stack_info.stack_outputs.TaskStatusTopicArn }} {{ stack_info.stack_outputs.SSMServiceRoleArn}} {{ stack_manager.s3_bucket }} {{ stack_info.stack_outputs.BackupTopicArn}} {{ stack_info.stack_outputs.AemStackManagerTableName }}"
    
    - name: set TTL attribute on the DynamoDB Table
      command: >
        aws dynamodb update-time-to-live --table-name "{{stack_info.stack_outputs.AemStackManagerTableName}}"
           --time-to-live-specification Enabled=true,AttributeName=ttl
           --region "{{ aws.region }}"
      when: stack_info|succeeded and stack_info.changed == true
      ignore_errors: True
      tags:
        - create

    - name: Check if Stack Manager Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{ stack_prefix }}-{{ stack_manager.stack_name }}"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report Stack Manager Problem if Any
      debug:
        msg: Stack "{{stack_prefix }}-{{ stack_manager.stack_name }}" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Stack Manager Stack
      cloudformation:
        stack_name: "{{stack_prefix }}-{{ stack_manager.stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
        - delete

    - name: Check if Stack Manager SSM Stack Exists
      command: >
        aws cloudformation describe-stacks --stack-name "{{stack_prefix }}-{{ stack_manager.ssm_stack_name }}"
             --query 'Stacks[].StackName' --region "{{ aws.region }}"
      ignore_errors: True
      register: stack_query
      tags:
        - delete

    - name: Report SSM Document Stack Problem if Any
      debug:
        msg: Stack "{{stack_prefix }}-{{ stack_manager.ssm_stack_name }}" does not exist or some other errors occured
      when:
        "stack_query.rc != 0"
      tags:
        - delete

    - name: Delete AEM Stack Manager SSM Document Stack
      cloudformation:
        stack_name: "{{stack_prefix }}-{{ stack_manager.ssm_stack_name }}"
        region: "{{ aws.region }}"
        state: absent
      when:
        "stack_query.rc == 0"
      tags:
        - delete

  handlers:
    - name: Clean Up Temp Folder
      file:
        path: "{{ stack_manager_tmp }}"
        state: absent
